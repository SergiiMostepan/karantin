{"version":3,"sources":["components/Contacts/ContactsList/Contactlist.module.css","components/Contacts/Section/Section.module.css","components/Contacts/Filter/Filter.module.css","components/Contacts/transitions/Contacts.module.css","components/Contacts/transitions/PhonebookHeader.module.css","utils/Notification.module.css","components/Contacts/transitions/Notify.module.css","components/Contacts/transitions/Filter.module.css","components/Contacts/Contacts.module.css","Redux/contactsReducers/contactSelectors.js","Redux/filterReducers/filterSelectors.js","Redux/contactsReducers/contactsReducers.js","Redux/loading/loadingReducer.js","Redux/error/errorReducer.js","components/Contacts/Section/Section.js","components/Contacts/InputForm/InputForm.js","components/Contacts/InputForm/InputFirmContainer.js","Redux/contactsReducers/contactsOperators.js","components/Contacts/ContactsList/CotactItem.js","components/Contacts/ContactsList/ContacContainer.js","components/Contacts/ContactsList/ContactsList.js","Redux/filterReducers/filterReducers.js","components/Contacts/Filter/Filter.js","components/Contacts/Filter/FilterContainer.js","utils/Notification.js","components/Contacts/Contacts.js","components/Contacts/ContactsContainer.js","components/App.js","Redux/store.js","index.js","components/Contacts/InputForm/InputForm.module.css"],"names":["module","exports","getContacts","state","contactState","getFilterQuery","filterState","contactSlice","createSlice","name","initialState","reducers","getContactStarted","action","getContactsSuccess","payload","deleteContactStarted","deleteContactsSuccess","filter","contact","id","postContactStarted","postContactsSuccess","loadingSlice","isLoading","errorSlice","getContactsError","deleteContactsError","postContactsError","Section","children","className","styles","bodycontainet","container","InputForm","userName","userPhone","handleChange","e","setState","target","value","isContactExist","props","find","item","toLowerCase","isExist","setTimeout","addContact","hendleSubmit","preventDefault","continer","inputName","onSubmit","this","inputFeld","type","onChange","BtnSubmit","Component","connect","dispatch","contactToPost","shortid","generate","actions","axios","post","then","res","data","catch","err","finally","ContactItem","deleteContact","userData","button","onClick","delete","ContactList","contacts","length","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","ContactTransition","filterSlice","changeQuery","Filter","changeFilter","reducer","query","Notify","Contacts","isLoaded","hendleContactExist","getItems","filteredTasks","includes","in","NotifyTransition","unmountOnExit","HeaderTransition","phoneBookHeader","FilterTransition","get","App","rootReducer","combineReducers","loadingState","error","middleware","getDefaultMiddleware","thunk","store","configureStore","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4fb267e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"Contactlist_continer__3abrk\",\"contact\":\"Contactlist_contact__3KFBr\",\"userData\":\"Contactlist_userData__q66Xw\",\"button\":\"Contactlist_button__2QP75\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bodycontainet\":\"Section_bodycontainet__1_NlP\",\"container\":\"Section_container__2-Cl7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1x9rJ\",\"inputFeld\":\"Filter_inputFeld__23tNA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Contacts_enter__1hE5h\",\"enterActive\":\"Contacts_enterActive__260CX\",\"exit\":\"Contacts_exit__22gVa\",\"exitActive\":\"Contacts_exitActive__1VxP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"PhonebookHeader_enter__2IJ5s\",\"enterActive\":\"PhonebookHeader_enterActive__2Mc6D\",\"exit\":\"PhonebookHeader_exit__16Blq\",\"exitActive\":\"PhonebookHeader_exitActive__JFKh_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__5_mJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Notify_enter__3h5JA\",\"enterActive\":\"Notify_enterActive___GquM\",\"exit\":\"Notify_exit__3tafC\",\"exitActive\":\"Notify_exitActive__1Ug5_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Filter_enter__16Fly\",\"enterActive\":\"Filter_enterActive__3qKIP\",\"exit\":\"Filter_exit__20Lvy\",\"exitActive\":\"Filter_exitActive__1PxnQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookHeader\":\"Contacts_phoneBookHeader__20mUn\"};","export const getContacts = state => state.contactState;\r\n\r\n// export const OnDeleteContact = (reducer, id) =>\r\n//   reducer.actions.deleteContact(id);\r\n\r\n// export const OnAddContact = (reducer, newContact) =>\r\n//   reducer.actions.addContact(newContact);\r\n","export const getFilterQuery = state => state.filterState;\r\n\r\nexport const getFilterOnChangeQuery = (reducer, query) =>\r\n  reducer.actions.changeQuery(query);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\nexport const contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: [],\r\n  reducers: {\r\n    // addContact: (state, action) => [...state, action.payload],\r\n    // deleteContact: (state, action) =>\r\n    //   state.filter(contact => contact.id !== action.payload),\r\n    getContactStarted: (state, action) => [...state],\r\n    getContactsSuccess: (state, action) => action.payload,\r\n    // getItemsFailure: (state, action) => [...state],\r\n    deleteContactStarted: (state, action) => [...state],\r\n    deleteContactsSuccess: (state, action) =>\r\n      state.filter(contact => contact.id !== action.payload),\r\n    postContactStarted: (state, action) => [...state],\r\n    postContactsSuccess: (state, action) => [...state, action.payload],\r\n  },\r\n});\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const loadingSlice = createSlice({\n  name: 'loadung',\n  initialState: false,\n  reducers: {\n    isLoading: (state, action) => !state,\n  },\n});\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const errorSlice = createSlice({\n  name: 'error',\n  initialState: null,\n  reducers: {\n    getContactsError: (state, action) => action.payload,\n    deleteContactsError: (state, action) => action.payload,\n    postContactsError: (state, action) => action.payload,\n  },\n});\n","import React, { Fragment } from 'react';\r\nimport styles from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children }) => (\r\n  <Fragment>\r\n    <div className={styles.bodycontainet}>\r\n      <div className={styles.container}> {children} </div>\r\n    </div>\r\n  </Fragment>\r\n);\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './InputForm.module.css';\r\n\r\nclass InputForm extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    isExist: PropTypes.func.isRequired,\r\n    contactState: PropTypes.array.isRequired,\r\n  };\r\n\r\n  state = {\r\n    userName: '',\r\n    userPhone: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  isContactExist = e => {\r\n    if (\r\n      this.props.contactState.find(\r\n        item =>\r\n          item.userName.toLowerCase() === this.state.userName.toLowerCase(),\r\n      )\r\n    ) {\r\n      this.props.isExist();\r\n      setTimeout(() => this.props.isExist(), 1000);\r\n\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n  };\r\n\r\n  hendleSubmit = e => {\r\n    e.preventDefault();\r\n    this.isContactExist(e);\r\n    this.setState({\r\n      userName: '',\r\n      userPhone: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.continer}>\r\n        <h3 className={styles.inputName}> Name </h3>\r\n        <form onSubmit={this.hendleSubmit}>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n          />\r\n          <h3 className={styles.inputName}> Number </h3>\r\n          <input\r\n            className={styles.inputFeld}\r\n            type=\"text\"\r\n            name=\"userPhone\"\r\n            value={this.state.userPhone}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className={styles.BtnSubmit} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputForm;\r\n","import { connect } from 'react-redux';\r\n// import { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\nimport {\r\n  // OnAddContact,\r\n  getContacts,\r\n} from '../../../Redux/contactsReducers/contactSelectors';\r\nimport { postContacts } from '../../../Redux/contactsReducers/contactsOperators';\r\nimport InputForm from './InputForm';\r\nimport shortid from 'shortid';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: state =>\r\n    dispatch(\r\n      postContacts({\r\n        ...state,\r\n        id: shortid.generate(),\r\n      }),\r\n    ),\r\n});\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   addContact: (e, state) =>\r\n//     dispatch(\r\n//       OnAddContact(contactSlice, {\r\n//         userName: state.userName,\r\n//         userPhone: state.userPhone,\r\n//         id: shortid.generate(),\r\n//       }),\r\n//     ),\r\n// });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import axios from 'axios';\nimport { contactSlice } from './contactsReducers';\nimport { loadingSlice } from '../loading/loadingReducer';\nimport { errorSlice } from '../error/errorReducer';\n\nexport const getItems = dispatch => {\n  return dispatch => {\n    dispatch(loadingSlice.actions.isLoading());\n    dispatch(contactSlice.actions.getContactStarted());\n\n    axios\n      .get(`http://localhost:3001/contacts`)\n      .then(res => {\n        dispatch(contactSlice.actions.getContactsSuccess(res.data));\n      })\n      .catch(err => {\n        dispatch(errorSlice.actions.getContactsError(err));\n      })\n      .finally(() => dispatch(loadingSlice.actions.isLoading()));\n  };\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(loadingSlice.actions.isLoading());\n  dispatch(contactSlice.actions.deleteContactStarted());\n\n  axios\n    .delete(`http://localhost:3001/contacts/${id}`)\n    .then(() => {\n      dispatch(contactSlice.actions.deleteContactsSuccess(id));\n    })\n    .catch(err => {\n      dispatch(errorSlice.actions.deleteContactsError(err));\n    })\n    .finally(() => dispatch(loadingSlice.actions.isLoading()));\n};\n\nexport const postContacts = contactToPost => dispatch => {\n  dispatch(loadingSlice.actions.isLoading());\n  dispatch(contactSlice.actions.postContactStarted());\n\n  axios\n    .post(`http://localhost:3001/contacts`, contactToPost)\n    .then(res => {\n      dispatch(contactSlice.actions.postContactsSuccess(res.data));\n    })\n    .catch(err => {\n      dispatch(errorSlice.actions.postContactsError(err));\n    })\n    .finally(() => dispatch(loadingSlice.actions.isLoading()));\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Contactlist.module.css';\r\n\r\nconst ContactItem = ({ userName, userPhone, id, deleteContact }) => {\r\n  const deleteCont = () => deleteContact(id);\r\n  return (\r\n    <li className={styles.contact}>\r\n      <div className={styles.userData}>\r\n        <div> {userName} </div> <div>{userPhone}</div>\r\n      </div>\r\n      <button className={styles.button} type=\"button\" onClick={deleteCont}>\r\n        <span> &#215;</span>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  userName: PropTypes.string.isRequired,\r\n  userPhone: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { connect } from 'react-redux';\r\n// import { contactSlice } from '../../../Redux/contactsReducers/contactsReducers';\r\n// import { OnDeleteContact } from '../../../Redux/contactsReducers/contactSelectors';\r\nimport { deleteContact } from '../../../Redux/contactsReducers/contactsOperators';\r\nimport ContactItem from './CotactItem';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n// const mapDispatchToProps = dispatch => ({\r\n//   deleteContact: id => dispatch(OnDeleteContact(contactSlice, id)),\r\n// });\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport ContactTransition from '../transitions/Contacts.module.css';\r\nimport ContactContainer from './ContacContainer';\r\nimport styles from './Contactlist.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) =>\r\n  contacts.length > 0 ? (\r\n    <TransitionGroup component=\"ul\" className={styles.continer}>\r\n      {contacts.map(({ userName, userPhone, id }) => (\r\n        <CSSTransition key={id} timeout={250} classNames={ContactTransition}>\r\n          <ContactContainer userName={userName} userPhone={userPhone} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  ) : (\r\n    <h3> You don `t have any contacts</h3>\r\n  );\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      userName: PropTypes.string.isRequired,\r\n      userPhone: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n    changeQuery: (state, action) => action.payload,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filterState, changeFilter }) => (\r\n  <div className={styles.container}>\r\n    <div> Find contacts by name </div>\r\n    <input\r\n      className={styles.inputFeld}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filterState.filter}\r\n      onChange={changeFilter}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  filterState: PropTypes.string.isRequired,\r\n  changeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\r\nimport { filterSlice } from '../../../Redux/filterReducers/filterReducers';\r\nimport {\r\n  getFilterQuery,\r\n  getFilterOnChangeQuery,\r\n} from '../../../Redux/filterReducers/filterSelectors';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: e =>\r\n    dispatch(getFilterOnChangeQuery(filterSlice, e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notify = () => (\r\n  <div className={styles.container}>\r\n    <p>Contact already exist!</p>\r\n  </div>\r\n);\r\n\r\nexport default Notify;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport Section from './Section/Section';\r\nimport InputForm from './InputForm/InputFirmContainer';\r\nimport ContactList from './ContactsList/ContactsList';\r\nimport Filter from './Filter/FilterContainer';\r\nimport HeaderTransition from './transitions/PhonebookHeader.module.css';\r\nimport Notify from '../../utils/Notification';\r\nimport NotifyTransition from './transitions/Notify.module.css';\r\nimport FilterTransition from './transitions/Filter.module.css';\r\n\r\nimport styles from './Contacts.module.css';\r\n\r\nconst taskFilter = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.userName.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\nclass Contacts extends Component {\r\n  static propTypes = {\r\n    addContacts: PropTypes.func,\r\n    filterState: PropTypes.string.isRequired,\r\n    contactState: PropTypes.array.isRequired,\r\n  };\r\n\r\n  state = {\r\n    isLoaded: false,\r\n    isContactExist: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getItems();\r\n  }\r\n\r\n  hendleContactExist = () => {\r\n    this.setState({\r\n      isContactExist: !this.state.isContactExist,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredTasks = taskFilter(\r\n      this.props.contactState,\r\n      this.props.filterState,\r\n    );\r\n\r\n    return (\r\n      <Section>\r\n        <CSSTransition\r\n          in={this.state.isContactExist}\r\n          timeout={250}\r\n          classNames={NotifyTransition}\r\n          unmountOnExit\r\n        >\r\n          <Notify />\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={this.state.isLoaded}\r\n          timeout={500}\r\n          classNames={HeaderTransition}\r\n          unmountOnExit\r\n        >\r\n          <h1 className={styles.phoneBookHeader}> Phonebook </h1>\r\n        </CSSTransition>\r\n        <InputForm isExist={this.hendleContactExist}> </InputForm>\r\n        <CSSTransition\r\n          in={this.props.contactState.length >= 2}\r\n          timeout={250}\r\n          classNames={FilterTransition}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n        <ContactList\r\n          contacts={\r\n            this.props.contactState.length >= 2\r\n              ? filteredTasks\r\n              : this.props.contactState\r\n          }\r\n        ></ContactList>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import { getContacts } from '../../Redux/contactsReducers/contactSelectors';\r\nimport { getFilterQuery } from '../../Redux/filterReducers/filterSelectors';\r\nimport { getItems } from '../../Redux/contactsReducers/contactsOperators';\r\nimport { connect } from 'react-redux';\r\nimport Contacts from './Contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  contactState: getContacts(state),\r\n  filterState: getFilterQuery(state),\r\n});\r\n\r\nconst MDTP = dispatch => ({\r\n  getItems: () => dispatch(getItems()),\r\n});\r\n\r\nexport default connect(mapStateToProps, MDTP)(Contacts);\r\n","import React, { Fragment } from 'react';\r\nimport 'normalize.css';\r\nimport Contacts from './Contacts/ContactsContainer';\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Contacts />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n// import { persistStore, persistReducer } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport thunk from 'redux-thunk';\r\nimport { contactSlice } from './contactsReducers/contactsReducers';\r\nimport { filterSlice } from './filterReducers/filterReducers';\r\nimport { loadingSlice } from '../Redux/loading/loadingReducer';\r\nimport { errorSlice } from '../Redux/error/errorReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contactState: contactSlice.reducer,\r\n  filterState: filterSlice.reducer,\r\n  loadingState: loadingSlice.reducer,\r\n  error: errorSlice.reducer,\r\n});\r\n\r\n// const persistConfig = {\r\n//   key: 'root',\r\n//   storage,\r\n//   whitelist: ['contactState'],\r\n// };\r\n\r\n// const defaultMiddlewareConfig = {\r\n//   serializableCheck: {\r\n//     ignoredActions: ['persist/PERSIST'],\r\n//   },\r\n// };\r\n\r\n// const middlewareError = [...getDefaultMiddleware(defaultMiddlewareConfig)];\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst middleware = [...getDefaultMiddleware(thunk)];\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport { store } from './Redux/store';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport 'normalize.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    {/* <PersistGate loading={null} persistor={persistor}> */}\r\n    <App />\r\n    {/* </PersistGate> */}\r\n  </Provider>,\r\n  document.querySelector('#root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"continer\":\"InputForm_continer__rtIub\",\"inputFeld\":\"InputForm_inputFeld__1ePzr\",\"inputName\":\"InputForm_inputName__1nXEP\",\"BtnSubmit\":\"InputForm_BtnSubmit__1TTfU\"};"],"sourceRoot":""}